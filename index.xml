<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jackie Hu Space</title>
    <link>http://sleephu.github.io/</link>
    <description>Recent content on Jackie Hu Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;#169; by Jackie Hu</copyright>
    <lastBuildDate>Wed, 06 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://sleephu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Plan for 2016</title>
      <link>http://sleephu.github.io/future/Goal42016/</link>
      <pubDate>Wed, 06 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sleephu.github.io/future/Goal42016/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;找到工作&lt;/li&gt;
&lt;li&gt;找到最感兴趣的事情&lt;/li&gt;
&lt;li&gt;学习一样新东西&lt;/li&gt;
&lt;li&gt;坚持锻炼&lt;/li&gt;
&lt;li&gt;多赞美少抱怨&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>SCJP Reading Notes</title>
      <link>http://sleephu.github.io/post/04-06-16/</link>
      <pubDate>Wed, 06 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sleephu.github.io/post/04-06-16/</guid>
      <description>&lt;p&gt;Summary
It is reading notes about the book &amp;ndash; SCJP.&lt;/p&gt;

&lt;p&gt;Declaration &amp;amp; Access Modifiers&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;default v.s protected&lt;/p&gt;

&lt;p&gt;default: package level access
 proceted: package + kids (subclass, access through inheritance, but not through a reference to an instance of the superclass)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;final abstract &amp;mdash;- wrong mix, opposite meaning&lt;/p&gt;

&lt;p&gt;final: cannot be subclassed;
 abstract: force to be subclassed&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reason to use final: security(satefy), java core libraries (String, Thread.isAlive)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;abstract v.s interface&lt;/p&gt;

&lt;p&gt;a. All methods in interface is implicitly public and abstract&lt;/p&gt;

&lt;p&gt;b. Interface can only define constants(public static final), not instance variables, while in abstract class, it could have instance variables&lt;/p&gt;

&lt;p&gt;c. An interface can extend one or more interfaces, abstract could only extend one other abstract class&lt;/p&gt;

&lt;p&gt;d. An interface can&amp;rsquo;t extend anything but another interface&lt;/p&gt;

&lt;p&gt;e. An interface can&amp;rsquo;t implement another interface/class&lt;/p&gt;

&lt;p&gt;f. An interface must be declared with the keyword interface, while it&amp;rsquo;s legal that not declare an abstract class with abstract keyword&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;this&amp;rdquo;: refers to currently executing object&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;final argument: keep the same value that the parameter had when it was passed into the method&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the first concrete class must implement all abstract methods of the super class&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;synchronized: only applies to method; a method can be accessed by only one thread at a time&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;static:&lt;/p&gt;

&lt;p&gt;a. exist independently of any instance created for the class&lt;/p&gt;

&lt;p&gt;b. static members exist before new instance of a class, and there will be only one copy of a static member regardless of the number of instances of that class&lt;/p&gt;

&lt;p&gt;c. all instances of a given class share the same value for any given static variable&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;constructor:&lt;/p&gt;

&lt;p&gt;a. same name as class name&lt;/p&gt;

&lt;p&gt;b. no return type&lt;/p&gt;

&lt;p&gt;c. cannot be static (since it is associated with object instantiation)&lt;/p&gt;

&lt;p&gt;d. cannot be final/abstract (since cannot be overriden)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;enum: a special kind of class, it can be used to restrict a variable to have one of only a few pre-defined values, which is good to reduce bugs.&lt;/p&gt;

&lt;p&gt;a. defined in different places(inside or outside a class), different ways to access it.&lt;/p&gt;

&lt;p&gt;b. like other class, could have constructor, instance variables, methods, etc.&lt;/p&gt;

&lt;p&gt;c. constructor:
    1) can never invoke enum constructors directly, and the constructor is invoked automatically with arguments you define after the constant value&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2) can define more than one arguments to the constructor (can overload)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;d. has static method: values(), returns array of the enum&amp;rsquo;s values&lt;/p&gt;

&lt;p&gt;eg: enum CoffeeSize {
      //4, 8, 10 are passed to the constructor
      SMALL(4), BIG(8), HUGE(10);
      CoffeeSize(int ounces) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     this.ounces = ounces;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   private int ounces;


   public int getOunces() {


      return ounces;


   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
p.s &amp;ldquo;final&amp;rdquo; is the only modifer could be used to local variables&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>生活不是眼前的苟且？</title>
      <link>http://sleephu.github.io/post/04-05-16/</link>
      <pubDate>Tue, 05 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sleephu.github.io/post/04-05-16/</guid>
      <description>&lt;p&gt;现在的生活就是，寻寻觅觅，冷冷清清。不知道什么时候才能有好点的状态去迎接明天，最近一直有在反思做人做事的问题，其实一直以来的人生不过是有一对很好的爸妈的好运，和很多朋友给我的包容的好运才让我觉得对待人事并没有什么问题，而事实上，到该进入社会的时候才知道，是一直逃避面对这个问题，才知道逃避对我来说已经是一种惯性。&lt;/p&gt;

&lt;p&gt;不该再这样下去了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple Life</title>
      <link>http://sleephu.github.io/future/horse/</link>
      <pubDate>Wed, 30 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sleephu.github.io/future/horse/</guid>
      <description>&lt;p&gt;Simple life is fine enough.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>US</title>
      <link>http://sleephu.github.io/map/jouneral/</link>
      <pubDate>Wed, 30 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sleephu.github.io/map/jouneral/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Info</title>
      <link>http://sleephu.github.io/post/info/</link>
      <pubDate>Tue, 29 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sleephu.github.io/post/info/</guid>
      <description>&lt;p&gt;Just for fun.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This is the title</title>
      <link>http://sleephu.github.io/model/food/</link>
      <pubDate>Wed, 29 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://sleephu.github.io/model/food/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Airline On-time Performance Big Data Analytic System Development</title>
      <link>http://sleephu.github.io/project/airline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sleephu.github.io/project/airline/</guid>
      <description>&lt;p&gt;● A big data analytics platform was implemented with Hadoop and HBase (Deployed on Amazon AWS).&lt;/p&gt;

&lt;p&gt;● Analyzed Airline On-time performance data from 1987 to 2008 with hundred millions of records.&lt;/p&gt;

&lt;p&gt;● Set up development environment in EC2: Java Environment setup, Hadoop, HBase, Pig, Apache Phoenix, Hive, Spark, Tomcat installation and configuration.&lt;/p&gt;

&lt;p&gt;● Developed 10+ MapReduce jobs, several Pig UDF in Java and 10+ Pig scripts for data cleansing and preprocessing, and stored refined data to HBase.&lt;/p&gt;

&lt;p&gt;● Implemented logistic regression algorithm using Spark ML-Lib to predict airline delays.&lt;/p&gt;

&lt;p&gt;● Technologies used: Hadoop, HBase, Hive, Apache Phoenix, Pig were used at back-end. D3.js, morris.js, crossfilter.js, and Bootstrap framework were used at front-end.&lt;/p&gt;

&lt;p&gt;@Github: &lt;a href=&#34;https://github.com/sleephu/Airline-ontime-performance-Analytics-BigData&#34;&gt;https://github.com/sleephu/Airline-ontime-performance-Analytics-BigData&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Amazone Same Day Delivery Application</title>
      <link>http://sleephu.github.io/project/amazon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sleephu.github.io/project/amazon/</guid>
      <description>&lt;p&gt;● A swing application was developed to provide a solution for same day product delivery on Netbeans in Java.&lt;/p&gt;

&lt;p&gt;● Followed the object oriented design principles and supported features including distributed virtual local suppliers, order processing, billing, invoicing, shipment and return management etc.&lt;/p&gt;

&lt;p&gt;● DB4O is used for data persistence.&lt;/p&gt;

&lt;p&gt;@Github &lt;a href=&#34;https://github.com/sleephu/A-Swing-project--Amazon-Same-Day-Delivery&#34;&gt;https://github.com/sleephu/A-Swing-project--Amazon-Same-Day-Delivery&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Climate Change Big Data Analytic System Development</title>
      <link>http://sleephu.github.io/project/climate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sleephu.github.io/project/climate/</guid>
      <description>&lt;p&gt;● A big data analytics platform was implemented with Spark and Cassandra (Deployed on Amazon AWS).&lt;/p&gt;

&lt;p&gt;● Analyzed GSOD Climate data from 1921 - 2013, (Raw data size around 21 GB).&lt;/p&gt;

&lt;p&gt;● Parsed data with Python and developed apps in Java for data cleansing and preprocessing, and loaded into Cassandra.&lt;/p&gt;

&lt;p&gt;● Implemented ARIMA algorithms with MATLAB ARIMA tool jar package to build prediction model for future climate.&lt;/p&gt;

&lt;p&gt;● Implemented k-means algorithms on Apache Spark cluster which provides real-time analytics capabilities to build clustering model to find areas with similar climate condition.&lt;/p&gt;

&lt;p&gt;● Built a responsive UI using Spring framework for interactive analysis.&lt;/p&gt;

&lt;p&gt;● Technologies used: Spark, Cassandra, Spring framework were used at back-end, Google Chart and Bootstrap framework were used at front-end.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>E-Commerce Web Platform for Restaurants</title>
      <link>http://sleephu.github.io/project/e-commerce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://sleephu.github.io/project/e-commerce/</guid>
      <description>&lt;p&gt;● A C2C web application was developed for restaurants in Java in Eclipse.&lt;/p&gt;

&lt;p&gt;● The features include registration, login, restaurants search feature, menu viewing, order processing and reservation etc.&lt;/p&gt;

&lt;p&gt;● Designed and implemented data model in MySQL, and used hibernate as ORM for persistence.&lt;/p&gt;

&lt;p&gt;● Technologies used: Spring MVC framework, Hibernate, and Spring Security were used. jQuery, and Bootstrap framework were used on the client side&lt;/p&gt;

&lt;p&gt;@Github: &lt;a href=&#34;https://github.com/sleephu/spring-MVC-project&#34;&gt;https://github.com/sleephu/spring-MVC-project&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>