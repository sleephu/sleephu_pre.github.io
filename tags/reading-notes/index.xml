<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reading Notes on Jackie Hu Space</title>
    <link>http://sleephu.github.io/tags/reading-notes/</link>
    <description>Recent content in Reading Notes on Jackie Hu Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;#169; by Jackie Hu</copyright>
    <lastBuildDate>Wed, 13 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://sleephu.github.io/tags/reading-notes/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SCJP Reading Notes - 6</title>
      <link>http://sleephu.github.io/post/04-13-16/</link>
      <pubDate>Wed, 13 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sleephu.github.io/post/04-13-16/</guid>
      <description>&lt;p&gt;Summary&lt;/p&gt;

&lt;p&gt;It is reading notes about the book &amp;ndash; SCJP.&lt;/p&gt;

&lt;p&gt;Inner Class&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;inner class is part of outer class, can access outer class&amp;rsquo;s private(or any other) members (one of key benefits, special relationship with outer class object)&lt;/p&gt;

&lt;p&gt;eg.
       class MyOuter {
          class MyInner {}
        }&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Instantiate inner class:&lt;/p&gt;

&lt;p&gt;a. inside outer class: MyInner inner = new MyInner();&lt;/p&gt;

&lt;p&gt;b. outside outer class: MyOuter.MyInner inner = MyOuter.new MyInner();&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;method local inner class: class defined inside method; it cannot access method local variable, unless it&amp;rsquo;s marked as final, the only modifiers can apply to are abstract and final(unlike regular inner class, the modifiers are public, private, protected, final, abstract, etc.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Anonymous Inner class&lt;/p&gt;

&lt;p&gt;eg:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Popcorn p = new Popcorn() {
    public void pop() {
      System.out.println(&amp;quot;anoymous popcorn&amp;quot;);
    }
 };
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Static Nested Class: is not inner class, is a static member of the enclosing class, like static method, it cannot access instance variables and nonstatic members of outer class
 eg:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class BigOuter {
    static vlass Nested {}
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thread&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Define Thread&lt;/p&gt;

&lt;p&gt;a. Extend java.lang.Thread (limitation: can&amp;rsquo;t extend anything else)&lt;/p&gt;

&lt;p&gt;b. Implement Runnable interface (benefit: can extend any class)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eg:
   class MyRunnable implements Runnable {
      public void run() {System.out.println(&amp;quot;implement job running in My Runnable&amp;quot;);}
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Instantiate thread&lt;/p&gt;

&lt;p&gt;a. Thread t = new Thread();&lt;/p&gt;

&lt;p&gt;b. need two classes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;i. Thread class: thread-specific code
ii. Runnable implementation class: job that should be run by a thread code
eg:
  i. instantiate runnable class
     MyRunnable r = new MyRunnable();
  ii. still need an instance of java.lang.Thread
     Thread t = new Thread(r); //pass Runnable to thread
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It&amp;rsquo;s legal the Thread itself implements Runnable&lt;/p&gt;

&lt;p&gt;eg:&lt;/p&gt;

&lt;p&gt;Thread t = new Thread(new MyThread());&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A thread is dead after run() method completes, the isAlive() is the best way to determine that; debug: getState()&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Starting thread: t.start(), only start once&lt;/p&gt;

&lt;p&gt;process: start &amp;ndash;&amp;gt; go to runnable pool &amp;ndash;&amp;gt; jvm select &amp;ndash;&amp;gt; running&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;which thread is running? Thread.currentThread().getName()&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Nothing is guaranteed, except: each thread will start, and each thread will run to completion&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;which thread run first?&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s the Thread Scheduler, which is part of JVM, could schedule thread to run based on thread priority(1-10, bigger, higher), but not guaranteed.
 eg:
    t.setPriority(8)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;yield(): make currently running thread head back and make other with same priority get their turn&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;join(): join at the end of the current running thread&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Thread problem: two different threads can access to a single instance of class?(multiple threads access to the same resource)&lt;/p&gt;

&lt;p&gt;eg.&lt;/p&gt;

&lt;p&gt;Two people each have checkbook, access to a single checking account&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Check the balance&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;if have enough money, make the withdrawal&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It&amp;rsquo;s race condition, may produce corrupted data.&lt;/p&gt;

&lt;p&gt;Way to Protect: automic operation&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; i. make variable private
 ii. Synchronize the code that modifies the variable
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Thread-safe class: class synchronized to protect its data&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;wait(), notify(), notifyAll() are all instance methods of Object&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;wait(): make thread go to waiting pool, if is current, gives up lock immediately&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;notify(): notify certain thread in the waiting pool to get ready to get the lock(lock may be not available immediately)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>SCJP Reading Notes - 5</title>
      <link>http://sleephu.github.io/post/04-12-16/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sleephu.github.io/post/04-12-16/</guid>
      <description>&lt;p&gt;Summary&lt;/p&gt;

&lt;p&gt;It is reading notes about the book &amp;ndash; SCJP.&lt;/p&gt;

&lt;p&gt;Generics and Collections&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Hashing retrieval:&lt;/p&gt;

&lt;p&gt;a. find the right bucket(using hashCode())&lt;/p&gt;

&lt;p&gt;b. search the bucket for the right element(using equals())&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;equals() v.s ==&lt;/p&gt;

&lt;p&gt;equals(): object content meaningfully equal (the two object reference refer to the same object)&lt;/p&gt;

&lt;p&gt;==: bits in the variables are identical&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;collection v.s Collection v.s Collections&lt;/p&gt;

&lt;p&gt;a. collection: represent any of the data structure in which objects are sorted and iterated over&lt;/p&gt;

&lt;p&gt;b. Collection: java.util.Collection interface from which Set, List, Queue extend&lt;/p&gt;

&lt;p&gt;c. Collections: java.util.Collections holds a pile of static utility methods for use with collections&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ordered v.s sorted&lt;/p&gt;

&lt;p&gt;a. ordered: iterate through the collection in a specific(non-random) order&lt;/p&gt;

&lt;p&gt;b. sorted: the order in the collection is according to some rule, associate with the property of the objects themselves&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;List (a list of things)&lt;/p&gt;

&lt;p&gt;a. ArrayList: faster iteration, not good for insertion/deletion&lt;/p&gt;

&lt;p&gt;b. Vector: like slower ArrayList (synchronized, thread-safe)&lt;/p&gt;

&lt;p&gt;c. LinkedList: faster insertion/deletion, not good for iteration&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set (Uniqueness, unique of things)&lt;/p&gt;

&lt;p&gt;a. HashSet: unsorted, unordered&lt;/p&gt;

&lt;p&gt;b. LinkedHashSet: ordered version of HashSet (in the order of element insertion)&lt;/p&gt;

&lt;p&gt;c. TreeSet: sorted, natural order by default, could construct with self-defined order by using comparable/comparator&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Map (unique identifier)&lt;/p&gt;

&lt;p&gt;a. HashMap: unsorted, unordered, allow one null key and multiple null values&lt;/p&gt;

&lt;p&gt;b. HashTable: synchronized HashMap, doesn&amp;rsquo;t allow anything that&amp;rsquo;s null&lt;/p&gt;

&lt;p&gt;c. LinkedHashMap: ordered(insertion order), compared to HashMap, faster iteration, bad add/remove&lt;/p&gt;

&lt;p&gt;d. TreeMap: Sorted Map(natural by default)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Queue (things arranged by order)&lt;/p&gt;

&lt;p&gt;a. PriorityQueue: ordered by priority according to a comparator&lt;/p&gt;

&lt;p&gt;b. LinkedList: basic queues, FIFO&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;See the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; myList = new ArrayList&amp;lt;String&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good things:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a. follow OOP, coding into interface
b. use generics; &amp;lt;Strin&amp;gt; --&amp;gt; type of collection
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Useful methods&lt;/p&gt;

&lt;p&gt;a. Collections.sort(anyCollectionToSort, comparator);&lt;/p&gt;

&lt;p&gt;b. Arrays.sort(anyArrayToSort, comparator);&lt;/p&gt;

&lt;p&gt;c. Arrays.asList()&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Generics benefit: type safe, dont need to cast, and won&amp;rsquo;t break other&amp;rsquo;s existing code&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The type of the variable declaration must match the type you pass to the actual object type, not a subtype of the decalared type&lt;/p&gt;

&lt;p&gt;eg:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  List&amp;lt;Animal&amp;gt; animals = new ArrayList&amp;lt;Dog&amp;gt;(); // wrong, could only add Dog, if add Cat, then put the wrong thing, then compiler error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;reason: Compiler and JVM behave differently, JVM doesn&amp;rsquo;t know about the type information, and it doesn&amp;rsquo;t have exception for generics (not like ArrayStoreException for Array)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;List&amp;lt;?&amp;gt; list v.s List list&lt;/p&gt;

&lt;p&gt;totally different.&lt;/p&gt;

&lt;p&gt;a. List&amp;lt;?&amp;gt; list: any type&lt;/p&gt;

&lt;p&gt;b. List list: only allow List, not anything else, like List, List &amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>SCJP Reading Notes - 4</title>
      <link>http://sleephu.github.io/post/04-11-16/</link>
      <pubDate>Mon, 11 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sleephu.github.io/post/04-11-16/</guid>
      <description>&lt;p&gt;Summary&lt;/p&gt;

&lt;p&gt;It is reading notes about the book &amp;ndash; SCJP.&lt;/p&gt;

&lt;p&gt;Operators&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Compound operator: the expression on the right side of = will always evaluated first.&lt;/p&gt;

&lt;p&gt;x *= 2 + 5; // x = x * (2 + 5);&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;String concatenation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; String a = &amp;quot;String&amp;quot;;
 int b = 3;
 int c = 7;
 System.out.println(a + b + c); // output: String37
 System.out.println(a + (b + c)); //output: String10
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Variables marked final cannot be incremented or decremented&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;^ operator(logical XOR): returns true if exactly one operand is true&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Increment &amp;amp; Decrement&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  int x = 2; int y = 3;
  if ((y == x++) | (x &amp;lt; ++y)) {
     System.out.println(&amp;quot;x=&amp;quot;+x+&amp;quot;, y=&amp;quot;+y);// output: x = 3, y = 4
  }
  a. y == x++ --&amp;gt; false: compare y == x first, then x+1 -&amp;gt; x = 3
  b. x &amp;lt; ++y --&amp;gt; true: ++y first -&amp;gt; y = 4, then compare x &amp;lt; y ? -&amp;gt; 3 &amp;lt; 4 true
  c. a | b --&amp;gt; print
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Flow Control, Exception &amp;amp; Assertions&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Switch case:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eg:
   switch(new Integer(4)) {
      case 4: System.out.println(&amp;quot;boxing is ok&amp;quot;); // it is legal
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;if break is omitted, the program keeps executing the remaining cases blocks until break found or switch ends&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;default case: use when none of case matched; it doesn&amp;rsquo;t have to come at the end of switch&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;for loop&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  eg: 
  a. for (initialization; condition; iteration) {}
  b. none of the tree sections required 
  for (;;) {System.out.println(&amp;quot;inside an endless loop&amp;quot;); }
  c. don&#39;t need to increment or set anything, can put in virtually any arbitrary code statements you want to happend with each iteration of the loop
     int b = 3;
     for (int a = 1; b != 1; System.out.println(&amp;quot;iterate&amp;quot;)) {
         b = b - a;
     }
      output: iterate
              iterate
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;break v.s continue&lt;/p&gt;

&lt;p&gt;break: stop execution of the innermost loop, start the next line of code after block&lt;/p&gt;

&lt;p&gt;continue: cease current execution, start next iteration of same loop if condition is still met&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Handling Exceptions&lt;/p&gt;

&lt;p&gt;a. code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    try {
     //some code, if put clearnup code here, it&#39;s easy to forget and redundent
    } catch(Exception e) {


    } finally {
      //clean up; release any system resource we allocate in the try clause
     // code here is always runs even exception not caught/try not run, unless System.exit() issue in try or catch clause
    }
    it&#39;s legal to omit either the catch clause or the finally clause, but not both
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;b. Ducked exception: method call stack&lt;/p&gt;

&lt;p&gt;c. exceptions are always subclass of Java.lang.Exception&lt;/p&gt;

&lt;p&gt;two types:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Unchecked Exceptions: Error(Things that not normarlly happend during program execution (eg. JVM run out of memory)), RuntimeException
  Checked Exception
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;d. resist the temptation to write a single catch all exception handler&lt;/p&gt;

&lt;p&gt;eg:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   try {
   // some code
   } catch (Exception e) {
     e.printStackTrace();
     }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;// it defeats design objective, lose valuable information, reduce reliability of program since it&amp;rsquo;s likely an exception will be caught that the handler not know how to handle&lt;/p&gt;

&lt;p&gt;e. looking available catch clause from top down&lt;/p&gt;

&lt;p&gt;eg:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    try{
      ...
    }catch (FileNotFoundException fe) { 
      ... 
    }catch (IOException ie) {
      ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;f. Handle or Declare: each method must either handle all checked exceptions(which is excluding Error and RuntimeException) by supplying a catch clause or list&lt;/p&gt;

&lt;p&gt;g. some examples for Error and RuntimeException&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Error: StackOverflow (OS run out of space to store call stack)
 RuntimeException: NullpointerException, ArrayOutOfIndex
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;String, I/O, Formatting and Parsing&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;String: immutable &amp;ndash;&amp;gt; once assign a value, the value can never change; use once, remain in memory forever&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  eg: 
  String x = &amp;quot;Java&amp;quot;;
  x.concat(&amp;quot; Rules!&amp;quot;);
  System.out.println(x); //output: Java
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Specific case analysis&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  eg:
     String s1 = &amp;quot;spring&amp;quot;; //&amp;quot;spring&amp;quot; object referenced by s1
     String s2 = s1 + &amp;quot; summer&amp;quot;;// &amp;quot; summer&amp;quot; object, lost; spring summer object, referenced by s2
     s1.contact(&amp;quot;fall &amp;quot;); // &amp;quot;fall &amp;quot; object, lost; &amp;quot;fall spring&amp;quot; object, lost
     s2.concat(s1); //&amp;quot;spring summer spring&amp;quot; object, lost
     s1 += &amp;quot; winter&amp;quot;; //&amp;quot;winter&amp;quot; object, lost; &amp;quot;spring winter&amp;quot; object, referenced by s1, at the same time, &amp;quot;spring&amp;quot; object lost reference
     System.out.println(s1 + &amp;quot;  &amp;quot;+ s2);// output: spring winter spring summer
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;String disanvertange: occupy large amount of memory, so JVM sets aside a special area of memory(String constant pool). When compiler encounters a string literal, it will check if the string literal in String constant pool or not first, if a match is found, no new objects created&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;String v.s StringBuffer/StringBuilder&lt;/p&gt;

&lt;p&gt;String: immutable&lt;/p&gt;

&lt;p&gt;StringBuffer/StringBuilder: changable, use when you have to make a lot of modifications to Strings of characters; common use: file I/O, handle large block of data, pass it on, and then reuse the same memory to have the next block of data&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;StringBuffer v.s StringBuilder&lt;/p&gt;

&lt;p&gt;StringBuffer: thread-safe, synchronization&lt;/p&gt;

&lt;p&gt;StringBuilder: faster, non-synchronization&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>SCJP Reading Notes - 3</title>
      <link>http://sleephu.github.io/post/04-08-16/</link>
      <pubDate>Fri, 08 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sleephu.github.io/post/04-08-16/</guid>
      <description>&lt;p&gt;Summary&lt;/p&gt;

&lt;p&gt;It is reading notes about the book &amp;ndash; SCJP.&lt;/p&gt;

&lt;p&gt;Assignments&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Stack v.s Heap&lt;/p&gt;

&lt;p&gt;Stack: Local variable(method variable/automatic) lives&lt;/p&gt;

&lt;p&gt;Heap: Objects and instance variable live&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Primitive Casting&lt;/p&gt;

&lt;p&gt;a. narrowing (put a larger thing (like long) into a smaller containers (like short)) requires explicit cast&lt;/p&gt;

&lt;p&gt;b. eg:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;implicit cast:
int a = 100;
long b = a; // an int value always fits in a long
eplicit cast:
float a = 100.001f;
int b = (int)a; //the float could lose info
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Arrays&lt;/p&gt;

&lt;p&gt;a. array elements are always given default values regardless of where the array itself declared or instantiated&lt;/p&gt;

&lt;p&gt;b. JVM only needs to know the size of array (the following eg is legal)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int[][] array = new int[3][];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;c. primitive array can accept any value that can be promoted implicitly to the declared type of the array.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eg:
int[] wl = new int[3];
byte b = 4;
char c = &#39;c&#39;;
short s = 7;
wl[0] = b; //ok, byte is smaller than int
wl[1] = c; //ok, char is smaller
wl[2] = s; //ok, short is smaller
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;d. Arrays of object reference&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; i. array element could be subclass of declared type
 ii. if array is declared as an interface, array element could refer to any instance of class that implements the declared interface
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Java is passing by value (a copy of the bits representing the reference)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Wrapper class&lt;/p&gt;

&lt;p&gt;a. corelates to primitives&lt;/p&gt;

&lt;p&gt;b. two fuctionalities&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  i. primitives can be handled like objects
  ii. provide unitility methods for primitives(usually conversions)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;c. Wrapper objects are immutable&lt;/p&gt;

&lt;p&gt;d. All wrapper class(except Character) provides 2 constructors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  i. primitive of the type being constructed
  ii. String representation of the type being constructed
  eg:
  Integer i1 = new Integer(2);
  Integer i2 = new Integer(&amp;quot;2&amp;quot;);


Exception: Character, only provides 1 constructor, which takes char argument
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Overloading tricks&lt;/p&gt;

&lt;p&gt;when an exact method isn&amp;rsquo;t found, what method JVM looks for?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; a.widening (method with smallest arguement that is wider than the parameter)
 b. autoboxing (int, autoboxing to Integer)
 c. var-args (int, int ...x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;eg:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; widening v.s autoboxing
 class AddBoxing {
 static void go(Integer x) {System.out.println(&amp;quot;Integer&amp;quot;);}
     static void go(long x) {System.out.println(&amp;quot;long&amp;quot;);}
     public static void main(String[] args) {
         int i = 5;
         go(i); //output: long---&amp;gt; widening wins
}
   }    
 autoboxing v.s var-args
  class AddVarargs {
      static void go(Byte x) {
        System.out.println(&amp;quot;Byte&amp;quot;);
     }
     static void go(byte ...x) {
        System.out.println(&amp;quot;byte&amp;quot;);
 }
     public static void main(String[] args) {
        byte b = 3;
        go(b);// output: Byte --&amp;gt; autoboxing wins
 }
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;d. none of wrapper classes will widen from one to another&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Garbage Collection(GC)&lt;/p&gt;

&lt;p&gt;a. Java manages memory automatically&lt;/p&gt;

&lt;p&gt;b. heap is part of memory where Java obj lives, and it&amp;rsquo;s the only part involved in garbage collection process.&lt;/p&gt;

&lt;p&gt;c. JVM decides when GC run (typically when sense memory running low)&lt;/p&gt;

&lt;p&gt;d. how GC work: mark and sweep algorithm&lt;/p&gt;

&lt;p&gt;e. when an object is eligible for GC: when no live thread can access it&lt;/p&gt;

&lt;p&gt;f. GC cannot guarantee enough memory: if maintain too many live objects &amp;ndash;&amp;gt; out of memory&lt;/p&gt;

&lt;p&gt;g. writing code that explicitly make object eligible for collection:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; i. nulling a reference
 ii. reassign a reference variable
 iii. isolate a reference (two instance of same class reference to each other, so no alive thread can access)
 iv. force GC (System.gc()) // cannot guarantee 
    (reason: 1). JVM may not have implemented this routine (the languagespecification allows this routine to do nothing at all; 2). another thread might grab lots of memory right after you run GC))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;fyi.&lt;/p&gt;

&lt;p&gt;The GC routines that Java provides are members of the Runtime class(special class that has a single object(singleton) for each program);&lt;/p&gt;

&lt;p&gt;The Runtime object provides a mechamism for communicating directly with Virtual Machine, Runtime.getRuntime() &amp;ndash;&amp;gt; returns Runtime instance (the Singleton)&lt;/p&gt;

&lt;p&gt;h. finalize():&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; i. allows run some code before object deleted (clean up resources)
 ii. only called once(at most!) by GC
 iii. not guaranteed to run, don&#39;t put important code
 iv. may result in save an object from deletion 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>SCJP Reading Notes - 2</title>
      <link>http://sleephu.github.io/post/04-07-16/</link>
      <pubDate>Thu, 07 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sleephu.github.io/post/04-07-16/</guid>
      <description>&lt;p&gt;Summary
It is reading notes about the book &amp;ndash; SCJP.&lt;/p&gt;

&lt;p&gt;Object Oriented&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Key Characteristics&lt;/p&gt;

&lt;p&gt;a. Encapsulation: associate with hiding implementation details, the ability to make changes in your implementation without breaking the code of others who use your code&lt;/p&gt;

&lt;p&gt;b. Inheritance: used to promote code reuse; use polymophism (many forms)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;i. IS-A: extends/implements
ii. HAS-A: based on usage, not inheritance
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;c. Polymorphism: many forms (see eg. as follows)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Dog extend Animal implements Animatable {}
Dog is:
     i. An Object
     ii. An Animal
     iii. A Dog
     iv. An Animatable
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Overriding v.s Overloading&lt;/p&gt;

&lt;p&gt;a. Overriding: if A extends B, A has the opportunity to override method in B (except final); Overloading: name reuse&lt;/p&gt;

&lt;p&gt;b. Overriding cannot change argument list; Overloading must change argument&lt;/p&gt;

&lt;p&gt;c. The overriding method can throw any unchecked (runtime) exception, regardless of whether the overriden method declare the exception, but can only throw fewer or narrower exceptions; the overloading can declare new or broader checked exceptions&lt;/p&gt;

&lt;p&gt;d. The return type must be the same as or a subtype of the return type declared in the original overriden superclass, while overloading method can change the return type&lt;/p&gt;

&lt;p&gt;e. The overriding method cannot have more restrict access modifier than original overriden method in superclass, while overloading method could have any access modifier&lt;/p&gt;

&lt;p&gt;f. The reference type (not the object type) determines which overloaded method is invoked, while the object type determines which overriden method is invoked!!!(important)&lt;/p&gt;

&lt;p&gt;eg:
     Overloading:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; class Animal {}
 class Horse extends Animal {}
 class UseAnimal {
     public void doStuff(Animal a) {
        System.out.println(&amp;quot;Animal Version&amp;quot;);
     }
     public void doStuff() {
        System.out.println(&amp;quot;Horse Version&amp;quot;);
 }
   } 
 UseAnimal ua = new UseAnimal();
 Animal a = new Horse();
 ua.doStuff(a); // output is &amp;quot;Animal Version&amp;quot;
 ---------------------------------------------------------
 Overriding:
 suppose eat() in Animal prints out &amp;quot;Animal eat&amp;quot;, in Horse prints out &amp;quot;Horse eat&amp;quot;
 Animal a = new Horse();
 System.out.println(a.eat()); //output: &amp;quot;Horse eat&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Explian: compiler checks the reference type which is Animal, but it&amp;rsquo;s JVM which looks for the object type decides which version to be invoked&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Casting
 a. downcast: casting down the inheritance tree to a more specific class&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (animal instanceof Dog) {
   Dog d = (Dog)animal;
   d.playDead();
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;b. upcast: works implicitly&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Dog d = new Dog();
Animal a1 = d; //upcast ok with no explicit cast
Animal a2 = (Animal)d; //upcast ok with an explicit cast
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Interface&lt;/p&gt;

&lt;p&gt;abstract class can choose to implement any, all, or none of methods from any of the interface&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Constructor:&lt;/p&gt;

&lt;p&gt;a. Every class has constructor (abstract class&amp;rsquo;s constructor is invoked when its concrete subclass is instantiated)&lt;/p&gt;

&lt;p&gt;b. no return type&lt;/p&gt;

&lt;p&gt;c. first statement must be super(); or this(); (if none was there, compiler insert super() call)&lt;/p&gt;

&lt;p&gt;d. if not type constructor, compiler generate a no-argu constructor automatically&lt;/p&gt;

&lt;p&gt;e. constructor name must match the class, and it&amp;rsquo;s legal to have method with same name as class name&lt;/p&gt;

&lt;p&gt;f. interface cannot have constructors, since they are not part of inheritance tree&lt;/p&gt;

&lt;p&gt;g. constructors are never inherited.(the type of constructor in super class can never determines the default constructor you get, and the default constructor is ALWAYS no-argu constructor)&lt;/p&gt;

&lt;p&gt;h. can overload constructor, and it&amp;rsquo;s used to provide alternate ways for clients to instaitate objects of your class. (p.s not always make sense, eg. java.awt.Color: you have to provide color info in constructor)&lt;/p&gt;

&lt;p&gt;i. constructor could have any access modifier, including private(only code with the class itself can instantiate an object of that type, if the private constructor class wants to allow an instance of the class to be used, the class must provide static method or variable that allow access to an instance created from within the class)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Static&lt;/p&gt;

&lt;p&gt;a. static = class; nonstatic = instance&lt;/p&gt;

&lt;p&gt;b. cannot access a nonstatic(instance) member(variables/methods) from static method&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  class Animal {
   static void doStuff() {
       System.out.println(&amp;quot;a&amp;quot;);
      }
    }
  class Dog extends Animal {
 static void doStuff() {
     System.out.println(&amp;quot;d&amp;quot;);
     }  
   }
  public static void main(String[] args) {
     Animal[] a = {new Animal(), new Dog(), new Animal};
     for (int x = 0; x &amp;lt; a.length; x++) {
     a[x].doStuff(); // output: a a a
    }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Coupling v.s Cohesion&lt;/p&gt;

&lt;p&gt;a. Coupling: the degree to which one class knows about another class&lt;/p&gt;

&lt;p&gt;b. Cohesion: the degree to which a class has a single, well-defined row or reponsibility&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>SCJP Reading Notes - 1</title>
      <link>http://sleephu.github.io/post/04-06-16/</link>
      <pubDate>Wed, 06 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sleephu.github.io/post/04-06-16/</guid>
      <description>&lt;p&gt;Summary
It is reading notes about the book &amp;ndash; SCJP.&lt;/p&gt;

&lt;p&gt;Declaration &amp;amp; Access Modifiers&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;default v.s protected&lt;/p&gt;

&lt;p&gt;default: package level access
 proceted: package + kids (subclass, access through inheritance, but not through a reference to an instance of the superclass)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;final abstract &amp;mdash;- wrong mix, opposite meaning&lt;/p&gt;

&lt;p&gt;final: cannot be subclassed;
 abstract: force to be subclassed&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reason to use final: security(satefy), java core libraries (String, Thread.isAlive)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;abstract v.s interface&lt;/p&gt;

&lt;p&gt;a. All methods in interface is implicitly public and abstract&lt;/p&gt;

&lt;p&gt;b. Interface can only define constants(public static final), not instance variables, while in abstract class, it could have instance variables&lt;/p&gt;

&lt;p&gt;c. An interface can extend one or more interfaces, abstract could only extend one other abstract class&lt;/p&gt;

&lt;p&gt;d. An interface can&amp;rsquo;t extend anything but another interface&lt;/p&gt;

&lt;p&gt;e. An interface can&amp;rsquo;t implement another interface/class&lt;/p&gt;

&lt;p&gt;f. An interface must be declared with the keyword interface, while it&amp;rsquo;s legal that not declare an abstract class with abstract keyword&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;this&amp;rdquo;: refers to currently executing object&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;final argument: keep the same value that the parameter had when it was passed into the method&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the first concrete class must implement all abstract methods of the super class&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;synchronized: only applies to method; a method can be accessed by only one thread at a time&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;static:&lt;/p&gt;

&lt;p&gt;a. exist independently of any instance created for the class&lt;/p&gt;

&lt;p&gt;b. static members exist before new instance of a class, and there will be only one copy of a static member regardless of the number of instances of that class&lt;/p&gt;

&lt;p&gt;c. all instances of a given class share the same value for any given static variable&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;constructor:&lt;/p&gt;

&lt;p&gt;a. same name as class name&lt;/p&gt;

&lt;p&gt;b. no return type&lt;/p&gt;

&lt;p&gt;c. cannot be static (since it is associated with object instantiation)&lt;/p&gt;

&lt;p&gt;d. cannot be final/abstract (since cannot be overriden)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;enum: a special kind of class, it can be used to restrict a variable to have one of only a few pre-defined values, which is good to reduce bugs.&lt;/p&gt;

&lt;p&gt;a. defined in different places(inside or outside a class), different ways to access it.&lt;/p&gt;

&lt;p&gt;b. like other class, could have constructor, instance variables, methods, etc.&lt;/p&gt;

&lt;p&gt;c. constructor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I. can never invoke enum constructors directly, and the constructor is invoked automatically with arguments you define after the constant value
II. can define more than one arguments to the constructor (can overload)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;d. has static method: values(), returns array of the enum&amp;rsquo;s values&lt;/p&gt;

&lt;p&gt;eg:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; enum CoffeeSize {


   //4, 8, 10 are passed to the constructor
   SMALL(4), BIG(8), HUGE(10);
   CoffeeSize(int ounces) {
     this.ounces = ounces;
    }
    private int ounces;
    public int getOunces() {
       return ounces;
         } 
  } 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;p.s &amp;ldquo;final&amp;rdquo; is the only modifer could be used to local variables&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>